#!/usr/bin/env python
import os
import inspect
from getclass import getclass
from isstring import isstring
from public import public


def _str_name(obj, fullname=False):
    obj = os.path.basename(obj).lstrip()
    pos = obj.find("(")
    if pos > 0:
        obj = obj[0:pos]
    pos = obj.find(" ")
    if pos > 0:
        obj = obj[0:pos]
    if not fullname:
        return obj.split(".")[-1]
    return obj


def _cls_attr_name(cls, prop):
    for name, member in inspect.getmembers(cls):
        if prop == member:
            return name


def _prop_name(prop, fullname):
    cls = getclass(prop)
    if not cls:
        return
    name = _cls_attr_name(cls, prop)
    module = inspect.getmodule(cls)
    names = [module.__name__, cls.__name__, name]
    return _str_name(".".join(names), fullname)


@public
def objectname(obj, fullname=False):
    """
    return object fullname with dot
    """
    if obj and isstring(obj):
        return _str_name(obj, fullname)
    if isinstance(obj, property):
        return _prop_name(obj, fullname)
    if not obj or not hasattr(obj, "__name__"):
        return
    name = obj.__name__
    names = []
    module = inspect.getmodule(obj)
    if not inspect.ismodule(obj) and module:
        names.append(os.path.basename(module.__name__))
    cls = getclass(obj)
    if cls and obj != cls:
        name = _cls_attr_name(cls, obj)
        names.append(cls.__name__)
    names.append(name)
    return _str_name(".".join(names), fullname)
